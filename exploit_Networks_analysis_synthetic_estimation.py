import numpy as np
import matplotlib.pyplot as plt

import pandas as pd
import os 
import itertools
import pickle


path_save="Networks_analysis_synthetic_estimation/results_est"
color_list=["green","purple","red","blue","yellow","orange","brown","black","yellow"]

# TO CHANGE, choose (30,5) or (3,2)
n,p=30,5


save= False
mh_bool=False
n_resamp=10

ani_list=[1,100]
slice_bool=[True,False]
to_prod=[ani_list,slice_bool]
list_param=list(itertools.product(*to_prod))



k=0
for param in list_param:

    ani,slice=param
    #open data
    if slice:
        print("slice")
        df_lks=pd.read_csv(os.path.join(path_save,"slice_estimation_lks_ani{:.0f}_n_p{:.0f},{:.0f}".format(ani,n,p))).values[:,1:]
        df_norm=pd.read_csv(os.path.join(path_save,"slice_estimation_rel_fnorm_ani{:.0f}_n_p{:.0f},{:.0f}".format(ani,n,p))).values[:,1:]
        df_mu=pd.read_csv(os.path.join(path_save,"slice_estimation_rel_munorm_ani{:.0f}_n_p{:.0f},{:.0f}".format(ani,n,p))).values[:,1:]

        with open(os.path.join(path_save,"slice_estimation_conv_true_ani{:.0f}_n_p{:.0f},{:.0f}".format(ani,n,p)), 'rb') as f:
            A_conv_true=pickle.load(f)
    else:
        print("mh")
        df_lks=pd.read_csv(os.path.join(path_save,"mhadapt_estimation_lks_ani{:.0f}_n_p{:.0f},{:.0f}".format(ani,n,p))).values[:,1:]
        df_norm=pd.read_csv(os.path.join(path_save,"mhadapt_estimation_rel_fnorm_ani{:.0f}_n_p{:.0f},{:.0f}".format(ani,n,p))).values[:,1:]
        df_mu=pd.read_csv(os.path.join(path_save,"mhadapt_estimation_rel_munorm_ani{:.0f}_n_p{:.0f},{:.0f}".format(ani,n,p))).values[:,1:]
        with open(os.path.join(path_save,"mhadapt_estimation_conv_true_ani{:.0f}_n_p{:.0f},{:.0f}".format(ani,n,p)), 'rb') as f:
            A_conv_true=pickle.load(f)

    #quantities of interest
    print("ani", ani)
    print("F norm meand and std",df_norm.mean(axis=0),df_norm.std(axis=0))
    print("mu norm meand and std",df_mu.mean(),df_mu.min(),df_mu.max())
    df_lks_mean=df_lks.mean(axis=0)
    df_lks_std=df_lks.std(axis=0)
    df_lks_min=df_lks.min(axis=0)
    df_lks_max=df_lks.max(axis=0)
    
    F_rrmse_mean=A_conv_true[:,:,0].mean(axis=0)
    print('last rrmse F',F_rrmse_mean[-1])
    F_rrmse_std=A_conv_true[:,:,0].std(axis=0)
    mu_rrmse_mean=A_conv_true[:,:,1].mean(axis=0)
    mu_rrmse_std=A_conv_true[:,:,1].std(axis=0)
    #plot
    if slice:
        
        plt.figure(0,figsize=(10,10))
        plt.title("complete log likelihood")
        #plt.plot(df_lks_mean+df_lks_std,"-.",linewidth=2,color=color_list[k])
        plt.plot(np.arange(len(df_lks_mean)),df_lks_mean,"-",label="A:"+str(ani)+", GSS",linewidth=4,color=color_list[k])
        #plt.plot(df_lks_mean-df_lks_std,"-.",linewidth=2,color=color_list[k])
        #plt.plot(df_lks_min,"-.",linewidth=2,color=color_list[k])
        plt.fill_between(np.arange(len(df_lks_mean)),df_lks_mean+df_lks_std,df_lks_mean-df_lks_std,alpha=0.2,color=color_list[k])
        plt.figure(1,figsize=(10,10))
        plt.plot(np.arange(len(F_rrmse_mean)),F_rrmse_mean,"-",label="A:"+str(ani)+", GSS",linewidth=4,color=color_list[k])
        plt.title("recovery on F")
        plt.fill_between(np.arange(len(F_rrmse_mean)),F_rrmse_mean+F_rrmse_std,F_rrmse_mean-F_rrmse_std,alpha=0.2,color=color_list[k])
        plt.figure(2,figsize=(10,10))
        plt.plot(np.arange(len(mu_rrmse_mean)),mu_rrmse_mean,"-",label="A:"+str(ani)+", GSS",linewidth=4,color=color_list[k])
        plt.title("recovery on mu")
        plt.fill_between(np.arange(len(mu_rrmse_mean)),mu_rrmse_mean+mu_rrmse_std,mu_rrmse_mean-mu_rrmse_std,alpha=0.2,color=color_list[k])
    else:
        plt.figure(0,figsize=(10,10))
        
        plt.plot(np.arange(len(df_lks_mean)),df_lks_mean,"-.",label="A:"+str(ani)+", AMH",linewidth=4,color=color_list[k])
        plt.fill_between(np.arange(len(df_lks_mean)),df_lks_mean+df_lks_std,df_lks_mean-df_lks_std,alpha=0.2,color=color_list[k])
        
        plt.figure(1,figsize=(10,10))
        plt.plot(np.arange(len(F_rrmse_mean)),F_rrmse_mean,"-",label="A:"+str(ani)+", AMH",linewidth=4,color=color_list[k])
        
        plt.fill_between(np.arange(len(F_rrmse_mean)),F_rrmse_mean+F_rrmse_std,F_rrmse_mean-F_rrmse_std,alpha=0.2,color=color_list[k])
        plt.figure(2,figsize=(10,10))
        plt.plot(np.arange(len(mu_rrmse_mean)),mu_rrmse_mean,"-",label="A:"+str(ani)+", AMH",linewidth=4,color=color_list[k])
        
        plt.fill_between(np.arange(len(mu_rrmse_mean)),mu_rrmse_mean+mu_rrmse_std,mu_rrmse_mean-mu_rrmse_std,alpha=0.2,color=color_list[k])
    k=k+1



plt.legend()
plt.show()
plt.ion()
    


